
import java.util.*;
import java.lang.*;
public class MyLinkedList<E>
{
    Node<E> first;
    Node<E> last;
    int size;
    
    public MyLinkedList()
    {
       first = null;
       last = null;
       size=0;
    }
    
    public boolean isEmpty() {
        
        return (size==0);
        
    }
    
    public void addFirst(E info) {
        
        Node<E> n =new Node<>();
        n.setInfo(info);
        
       if (isEmpty())  
           last=n;
           
    
       else {
        n.setNext(first);
        first.setPrev(n);
        
    }
    first=n;
    size++;
        
    }
    
    public E removeFirst() {
        
    if (!isEmpty()) {
        
    E val = first.getInfo();
        if (size>1) {
       
        first.getNext().setPrev(null);
        first=first.getNext();
        size--;
        
    }
    else if (size==1) {
       
         first=null;
         last=null;
         size--;
         
        
    }
      return val;  
    }
    else 
    throw new NoSuchElementException();

    }
    
    
    public E removeLast() {
        
    if (!isEmpty()) {
        
   
        E val = last.getInfo();
        if (size>1) {
        last.getPrev().setNext(null);
        last=last.getPrev();
        size--;
    }
       else if (size==1) {
           
         first=null;
         last=null;
         size--;
        }
        return val;
    }
    else 
    
        throw new NoSuchElementException();
}   
   
    public E remove(int k) {
        
        if (!isEmpty()) {
        Node<E> temp = first;
        
        if ((k>=0) && (k<size)) {
            if (k==0) return removeFirst();
            else if (k==size-1) return removeLast();
            else {
                // get to k
               // int i=0;
                for (int i=0;i<k;i++) 
                temp = temp.getNext();
                E val=temp.getInfo();
              temp.getPrev().setNext(temp.getNext());
              temp.getNext().setPrev(temp.getPrev());
              size--;
              return val;
                
            }
        }
        else throw new IndexOutOfBoundsException();
    }
            else {
                System.out.println("list empty ..");
            
                throw new NoSuchElementException();
        }
    }
    
    
    // adds an item to the end of the list with info field set to val
    public void addLast(E val) {
        Node<E> n =new Node<>();
        n.setInfo(val);
       if (isEmpty())  
           first=n;
       else {
        n.setPrev(last);
        last.setNext(n);
        }
    last=n;
    size++;
    }
    
    // prints all items in the list from first to last taking care of situations when the list is empty
    // use exception handling
    public void printListForward() {
        if (!isEmpty()){
            Node<E> temp = first;
            do {
            System.out.println(temp.getInfo());  
            temp = temp.getNext();  
        } while (temp!=null);
    }
        else throw new NoSuchElementException();
        
    }
    
    // prints all items in the list from last to first taking care of situations when the list is em
    // use exception handling
    public void printListBackward() {
        
        if (!isEmpty()){
            Node<E> temp = last;
            do {
            System.out.println(temp.getInfo());
            temp = temp.getPrev(); 
            } while (temp!=null);
         }
    else throw new NoSuchElementException();
    }
    //returns true if and only if the list contains at least one element e such that 
    //Objects.equals(o,e)
    //return false if the list is empty
    public boolean contains(Object o) {
        if (!isEmpty()){
            Node<E> temp = first;
            do {
            if (Objects.equals(temp.getInfo(),o))
            return true; 
            temp=temp.getNext();
            } while (temp!=null);
         return false;
        }
        else throw new NoSuchElementException();
    }
    
    // brings the current list back to an empty list
    public void clear() {
        first=null;
        last=null;
        size=0;
        
    }
    // returns the info value stored at node i 
    // throw IndexOutOfBounds exception of i is out of bounds or the list is empty
    public E get(int i) {
        int j=0;
        if (i>=0 && i<size) {
        if (!isEmpty()){
            Node<E> temp = first;
            do {
            if (i==j) return temp.getInfo();  
            temp = temp.getNext();  
            j++;
        } while (temp!=null);
    }
     throw new NoSuchElementException();
    }
    else  throw new IndexOutOfBoundsException();
}
    
    // compares this MyLinkedList with the parameter otherList 
    // and returns true if the linkedlists have identical values from beginning to end
    // same size and this.get(i).equals(otherList.get(i)) should be true for all i
    // lists can be empty in which case return true
    //should run in O(n) time where n is the size of each list.
    public boolean equals(Object otherList) {
        if (otherList instanceof MyLinkedList) {
             MyLinkedList<E> p =(MyLinkedList<E>)otherList;
             if (size!=p.size) return false;
             else if (isEmpty()&&p.isEmpty()) return true;
             else {
                    Node<E> t1= this.first;
                    Node<E> t2 = p.first;
                    do { 
                        E e1 = t1.getInfo();
                        E e2 = t2.getInfo();
                        if (!e1.equals(e2)) return false;
                        t1=t1.getNext();
                        t2=t2.getNext();
                        }  while (t1!=null && t2!=null);
                        }
                        return true;
 
         }
 else return false;
}

//reference java T point
public MyLinkedList<E> uniqueList() {
    MyLinkedList list = new MyLinkedList(); //initializes new list

    list.addFirst(first.info); //sets head of list
    Node current = first.next; //sets current node
    Node index = null, temp = null; //initializes temp vars


    //copies list
    while(current != null){
        list.addLast(current.info);
        current = current.next;
    }

    //sets new current
    current = list.first;


    while (current != null) {
        //temp will point to previous node index
        temp = current;
        //index points to node next to current
        index = current.next;

        while(index != null){
            //if current nodes data is equal to index nodes data
            if(current.info.equals(index.info)){
                //skips duplicate
                temp.next = index.next;
            } else {
                //temp points to previous node
                temp = index;
            }
            index = index.next;
        }
        current = current.next;
    }
    return list;
}

public MyLinkedList<E> commonValues (MyLinkedList<E> other) {
        //initializes variables and lists
	MyLinkedList list1 = new MyLinkedList();
	MyLinkedList list2 = new MyLinkedList();
	MyLinkedList intersection = new MyLinkedList();

	list1.addFirst(first.info);
	list2.addFirst(other.first.info);

	Node current1 = first.next;
	Node current2 = other.first.next;


    //copies list
    while(current1 != null){
        list1.addLast(current1.info);
        current1 = current1.next;
    }


    //copies list
    while(current2 != null){
        list2.addLast(current2.info);
        current2 = current2.next;
    }

    //points to first values of lists
    current1 = first;
    current2 = other.first;

    while (current1 != null) {
        while (current2 != null) {
            if(current1.info.equals(current2.info)){ //returns true if values are the same
                intersection.addLast(current1.info); //adds values to intersection if the lists intersect
            }
            current2 = current2.next; //points to next value
        }
        current1 = current1.next; //points to next value
        current2 = list2.first; //starts current2 from the beginning
    }


    return intersection.uniqueList(); //returns unique values
}

public MyLinkedList<E> union (MyLinkedList<E> other) {
    //initializes variables and lists
    MyLinkedList union = new MyLinkedList();

    //returns empty if both lists are empty
    if(first == null && other.first == null){
        union.addFirst("empty");
        return union;
    }

    //if the first list is empty
    if(first == null){
        union.addFirst("empty");
        return union;
    }

    //if the other list is empty
    if(other.first == null){
        union.addFirst("empty");
        return union;
    }

    //initializing pointers
    Node current1 = first.next;
    Node current2 = other.first.next;


    //copies list
    while(current1 != null){
        union.addLast(current1.info);
        current1 = current1.next;
    }


    //copies list
    while(current2 != null){
        union.addLast(current2.info);
        current2 = current2.next;
    }



    //returns unique values in list
	return union.uniqueList();
}

//reference geeks for geeks
void printList(Node node){
        while(node != null){
            System.out.print(node.info + " ");
            node = node.next;
        }
}

    public static void main(String[] args){


        MyLinkedList list = new MyLinkedList();
        MyLinkedList other = new MyLinkedList();
        MyLinkedList empty1 = new MyLinkedList();
        MyLinkedList empty2 = new MyLinkedList();

        list.addFirst(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(3);
        list.addLast(4);
        list.addLast(2);
        list.addLast(1);
        list.addLast(5);

        other.addFirst(1);
        other.addLast(5);
        other.addLast(5);
        other.addLast(2);
        other.addLast(2);
        other.addLast(10);
        other.addLast(10);
        other.addLast(11);

        list.printList(list.first);
        System.out.println();
        list.printList(list.uniqueList().first);
        System.out.println();
        list.printList(list.commonValues(other).first);
        System.out.println();
        list.printList(list.union(other).first);
        System.out.println();
        list.printList(list.union(empty1).first);
        System.out.println();
        empty1.printList(empty1.union(empty2).first);


    }


}
