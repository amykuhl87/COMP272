public class BinarySearchTree<E extends Comparable<E>> extends BinaryTree<E> {

    public BinarySearchTree() {

    }
    public BinarySearchTree(E val) {

    }

    // returns true if BST has val else false.
    public boolean contains (E val) {
    boolean output = false;
    int compare = val.compareTo(root.getInfo());
    if(compare == 0){
        output = true;
    } else if (compare < 0 && root.getLeft() != null && root.getLeft() == val){
        output = true;
    } else if (compare > 0 && root.getRight() != null && root.getRight() == val){
        output = true;
    }

    return output;
    }
    // inserts val at the right place satisfying search tree properties, should handle if the tree is empty
// if value is already there then donâ€™t insert it again
    public void insert(E val) {
        //calls a recursive method to add nodes
        root = insertRecursive(root, val);
    }
    
    Node insertRecursive(Node root, E key){
        //if the tree is empty, it returns a new node
        if(root == null){
            root = new Node(key);
            return root;
        }
        
        //if there are nodes, moves down the tree
        if(key.compareTo((E)root.getInfo()) < 0 ){ //if the value comes before the set info
            root.left = insertRecursive(root.left, key);
        } else if (key.compareTo((E)root.getInfo()) > 0){ //if the value comes after the set info
            root.right = insertRecursive(root.right, key);
        }
        
        //returns information
        return root;
    }

    // returns the minimum value stored in the tree
    public E findMin() {
        E result = null;



        return result;
    }

    // returns the maximum value stored in the tree
    public E findMax() {
        E result = null;




        return result;
    }

    public static void main(String[] args) {
        BinarySearchTree<Integer> bt= new BinarySearchTree<>();
        bt.insert(5);
        bt.insert(10);
        bt.insert(3);
        bt.insert(20);
        bt.insert(8);
        bt.insert(4);
    }


}
