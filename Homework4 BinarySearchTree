public class BinarySearchTree<E extends Comparable<E>> extends BinaryTree<E> {

    public BinarySearchTree() {
    size = 0;
    root = null;
    }
    public BinarySearchTree(E val) {
    root = new Node(val);
    size = 1; //root node only
    }

    // returns true if BST has val else false.
    public boolean contains (E val) {
        return containsHelper(root, val);
    }

    //contains helper method
    private boolean containsHelper(Node node, E item){
        boolean result = false;

        if(root == null){
            return false;
        }
        if(root.getInfo() == item){
            return true;
        }

        int compareResults = item.compareTo((E)node.getInfo());

        if(compareResults < 0){
            result = containsHelper(node.left, item);
        } else if(compareResults > 0){
            result = containsHelper(node.right, item);
        } else {
            result = true;
        }

        return result;
    }


    // inserts val at the right place satisfying search tree properties, should handle if the tree is empty
// if value is already there then donâ€™t insert it again
    public void insert(E val) {
        //calls a recursive method to add nodes
        root = insertRecursive(root, val);
    }

    Node insertRecursive(Node root, E key){
        //if the tree is empty, it returns a new node
        if(root == null){
            root = new Node(key);
            return root;
        }

        //if there are nodes, moves down the tree
        if(key.compareTo((E)root.getInfo()) < 0 ){ //if the value comes before the set info
            root.left = insertRecursive(root.left, key);
        } else if (key.compareTo((E)root.getInfo()) > 0){ //if the value comes after the set info
            root.right = insertRecursive(root.right, key);
        }

        //returns information
        return root;
    }

    // returns the minimum value stored in the tree
    public E findMin() {
        Node current = root;

        while(current.left != null){
            current = current.left;
        }

        return (E)current.getInfo();
    }

    // returns the maximum value stored in the tree
    public E findMax() {
        Node current = root;

        while(current.right != null){
            current = current.right;
        }

        return (E)current.getInfo();
    }

    public static void main(String[] args) {
        BinarySearchTree<Integer> bt= new BinarySearchTree<>();
        bt.insert(5);
        bt.insert(10);
        bt.insert(3);
        bt.insert(20);
        bt.insert(8);
        bt.insert(4);
        System.out.println(bt.findMin());
        System.out.println(bt.findMax());
        System.out.println(bt.contains(10));
        System.out.println(bt.contains(15));
    }


}
